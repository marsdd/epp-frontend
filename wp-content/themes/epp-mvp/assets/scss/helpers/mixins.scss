@mixin cssBorderRadius($size) {
	-moz-border-radius: $size;
	-webkit-border-radius: $size;
	border-radius: $size;
}

@mixin transitionAll($duration, $ease){
	-webkit-transition: all $duration $ease;
	-moz-transition: all $duration $ease;
	-ms-transition: all $duration $ease;
	-o-transition: all $duration $ease;
	transition: all $duration $ease;
}

@mixin transitionType($type, $duration, $ease){
	-webkit-transition: $type $duration $ease;
  	-moz-transition: $type $duration $ease;
  	-ms-transition: $type $duration $ease;
  	-o-transition: $type $duration $ease;
  	transition: $type $duration $ease;
}

@mixin transitionMultiple($transitions...){
	-webkit-transition: $transitions;
  	-moz-transition: $transitions;
  	-ms-transition: $transitions;
  	-o-transition: $transitions;
  	transition: $transitions;
}

@mixin cssRotate($deg){
	-ms-transform: rotate($deg); /* IE 9 */
    -webkit-transform: rotate($deg); /* Chrome, Safari, Opera */
    transform: rotate($deg);
}

@mixin cubicBezier($duration){
	-webkit-transition: all $duration cubic-bezier(0.585,-.6,.43,1.65);
	-moz-transition: all $duration cubic-bezier(0.585,-.6,.43,1.65);
	-ms-transition: all $duration cubic-bezier(0.585,-.6,.43,1.65);
	-o-transition: all $duration cubic-bezier(0.585,-.6,.43,1.65);
	transition: all $duration cubic-bezier(0.585,-.6,.43,1.65);
}

@mixin fontFace($fontFamily: myFont, $eotFileSrc: 'myFont.eot', $woffFileSrc: 'myFont.woff', $ttfFileSrc: 'myFont.ttf') {
  font-family: $fontFamily;
  src: url($eotFileSrc)  format('eot'),
       url($woffFileSrc) format('woff'),
       url($ttfFileSrc)  format('truetype');
}

@mixin cssScale($size, $duration){
	-moz-transform: scale($size);
    -webkit-transform: scale($size);
    transform: scale($size);
    -moz-transition-duration: $duration;
    -webkit-transition-duration: $duration;
    transition-duration: $duration;
}

@mixin cssColumns($count, $gap){
	-moz-column-count: $count;
  	-moz-column-gap: $gap;
  	-webkit-column-count: $count;
  	-webkit-column-gap: $gap;
  	column-count: $count;
  	column-gap: $gap;
}

@mixin mobilePadding{
	padding-left: remCalc(15px);
	padding-right: remCalc(15px);
}

@mixin mobileMargin{
	margin-left: remCalc(15px);
	margin-right: remCalc(15px);
}

@mixin centreAlign($type: centre){

	@if $type == centre {
		-webkit-transform: translate(-50%,-50%);
  	-ms-transform: translate(-50%,-50%);
  	transform: translate(-50%,-50%);
	}
	
	@else if $type == horizontal {
		-webkit-transform: translateX(-50%);
  	-ms-transform: translateX(-50%);
  	transform: translateX(-50%);
	}

	@else if $type == vertical {
		-webkit-transform: translateY(-50%);
  	-ms-transform: translateY(-50%);
  	transform: translateY(-50%);
	}

}

@mixin removeCentreAlign{
	-webkit-transform: translate(0);
	-ms-transform: translate(0);
	transform: translate(0);
}

// Just space-separate all the individual values. The order doesn't matter except when using both duration and delay, they need to be in that order.
// name | duration | timing-function | delay | iteration-count | direction | fill-mode | play-state
// $fill = 'forwards' = to have it animate and stay there
@mixin cssAnimation($animation, $duration, $iterations, $ease){
	-webkit-animation: $animation $duration $iterations $ease;
	-moz-animation: $animation $duration $iterations $ease;
	animation: $animation $duration $iterations $ease;
}

// @mixin cssTriangleRight($width, $height, $colour){
// 	width: 0;
// 	height: 0;
// 	border-top: ($height/2) solid transparent;
// 	border-bottom: ($height/2) solid transparent;
// 	border-left: $width solid $colour;
// }

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

@mixin cssBoxShadow($x, $y, $blur, $spread, $hex, $opacity){
	-webkit-box-shadow: $x $y $blur $spread rgba($hex, $opacity);
	-moz-box-shadow: $x $y $blur $spread rgba($hex, $opacity);
	box-shadow: $x $y $blur $spread rgba($hex, $opacity);
}

@mixin cssDropShadow($x, $y, $blur, $hex, $opacity){
	// -webkit-box-shadow: $x $y $blur $spread rgba($hex, $opacity);
	// -moz-box-shadow: $x $y $blur $spread rgba($hex, $opacity);
	// box-shadow: $x $y $blur $spread rgba($hex, $opacity);
	filter: drop-shadow($x $y $blur rgba($hex, $opacity));
}

@mixin removeBoxShadow(){
	-webkit-box-shadow: none;
	-moz-box-shadow: none;
	box-shadow: none;
}

@mixin cssTriangle($width, $height, $colour, $direction: left){
	display: inline-block;
	width: 0;
	height: 0;
	border-style: solid;

	@if $direction == left {
		border-width: ($height/2) $width ($height/2) 0;
		border-color: transparent $colour transparent transparent;
	}
	@if $direction == right {
		border-width: ($height/2) 0 ($height/2) $width;
		border-color: transparent transparent transparent $colour;
	}
	@if $direction == top {
		border-width: 0 ($width/2) $height ($width/2);
		border-color: transparent transparent $colour transparent;
	}
	@if $direction == bottom {
		border-width: $height ($width/2) 0 ($width/2);
		border-color: $colour transparent transparent transparent;
	}
}

@mixin cssGradient($start, $mid, $stop, $type: default){

	@if $type == default {

		background: $start; /* Old browsers */
		background: -moz-linear-gradient(top,  $start 0%, $stop 100%); /* FF3.6+ */
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start), color-stop(100%,$stop)); /* Chrome,Safari4+ */
		background: -webkit-linear-gradient(top,  $start 0%,$stop 100%); /* Chrome10+,Safari5.1+ */
		background: -o-linear-gradient(top,  $start 0%,$stop 100%); /* Opera 11.10+ */
		background: -ms-linear-gradient(top,  $start 0%,$stop 100%); /* IE10+ */
		background: linear-gradient(to bottom,  $start 0%,$stop 100%); /* W3C */
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start}', endColorstr='#{$stop}',GradientType=0 ); /* IE6-9 */

	}

	@else if $type == mid {

		background: $start; /* Old browsers */
		background: -moz-linear-gradient(top,  $start 0%, $mid 50%, $stop 100%); /* FF3.6+ */
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start), color-stop(50%,$mid), color-stop(100%,$stop)); /* Chrome,Safari4+ */
		background: -webkit-linear-gradient(top,  $start 0%,$mid 50%,$stop 100%); /* Chrome10+,Safari5.1+ */
		background: -o-linear-gradient(top,  $start 0%,$mid 50%,$stop 100%); /* Opera 11.10+ */
		background: -ms-linear-gradient(top,  $start 0%,$mid 50%,$stop 100%); /* IE10+ */
		background: linear-gradient(to bottom,  $start 0%,$mid 50%,$stop 100%); /* W3C */
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start}', endColorstr='#{$stop}',GradientType=0 ); /* IE6-9 */

	}

	@else if $type == horizontal {

		background: $start; /* Old browsers */
		background: -moz-linear-gradient(left,  $start 0%, $stop 100%); /* FF3.6-15 */
		background: -webkit-linear-gradient(left,  $start 0%,$stop 100%); /* Chrome10-25,Safari5.1-6 */
		background: linear-gradient(to right,  $start 0%,$stop 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start}', endColorstr='#{$stop}',GradientType=1 ); /* IE6-9 */

	}

	@else if $type == vertical {

		/* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#536dfe+0,50e3d4+100 */
		background: $start; /* Old browsers */
		background: -moz-linear-gradient(top, $start 0%, $stop 100%); /* FF3.6-15 */
		background: -webkit-linear-gradient(top, $start 0%,$stop 100%); /* Chrome10-25,Safari5.1-6 */
		background: linear-gradient(to bottom, $start 0%,$stop 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start}', endColorstr='#{$stop}',GradientType=0 ); /* IE6-9 */
	
	}

}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

/* @mixin button($type: '', $bg: $primary-colour, $bg-from: $blue, $bg-to: $purple) {

  display: inline-block;
  min-width: 200px;
  @include cssBorderRadius(30px);
  @include cssGradient($bg-from, none, $bg-to, horizontal);
  color: #fff;
  border-width: 0;
  font-family: $body-font;
  font-size: remCalc(15px);
  font-weight: 500;
  text-transform: uppercase;
  text-align: center;
  line-height: 1;
  padding: 10px;
	cursor: pointer;
	&:hover{
		text-decoration: none;
		color: #fff;
	}

	@if $type == large {
		min-width: 262px;
  	padding: 23px 22px 21px;
	}

	@else if $type == outlined {
		min-width: 0;
		color: $blue;
		border: 1px solid $blue;
		background: none;
		font-size: remCalc(12px);
		letter-spacing: 0.4px;
		padding: 13px 25px;
		filter: none;
		&:hover{
			color: $blue;
		}
	}

	@else if $type == rectangle {
		border: 1px solid $dark-blue;
		border: 1px solid rgba($dark-blue, 0.4);
		@include cssBorderRadius(4px);
		color: $dark-blue;
		color: rgba($dark-blue, 0.4);
		background: none;
		filter: none;
		min-width: 0;
		font-size: remCalc(12px);
		padding: 13px 23px;
		&:hover{
			color: $dark-blue;
			color: rgba($dark-blue, 0.4);
		}
	}

	@else if $type == solid {
		background: $bg;
		filter: none;
		min-width: 0;
		font-size: remCalc(12px);
		padding: 14px 28px;
		letter-spacing: 0.4px;
	}
	
	// @else {
	// 	color: #fff;
	// 	// border-width: 0;
	// 	@include cssGradientLtoR($blue, $purple);
	// 	font-size: remCalc(15px);
	// 	font-weight: 500;
	// 	text-transform: uppercase;
	// 	&:hover{
	// 		color: #fff;
	// 	}
	// }
	
} */

@mixin button($type: null, $gr-from: null, $gr-to: null) {

  display: inline-block;
	background: $primary-colour;
  padding: 14px 58px;
  @include cssBorderRadius(30px);
  font-family: $body-font;
	// font-size: remCalc(15px);
	font-size: remCalc(12px);
  font-weight: 500;
  text-transform: uppercase;
	text-align: center;
	letter-spacing: 0.4px;
  line-height: 1;
  cursor: pointer;
  color: #fff;
	border: none;
	white-space: nowrap;

	&:hover{
		text-decoration: none;
		color: #fff;
	}

	@if $type == outlined {
		background: none;
		color: $primary-colour;
		border: 1px solid $primary-colour;
		padding: 13px 25px;
		&:hover{
			color: $primary-colour;
		}
	}

	// @else if $type == rectangle {
	// 	@include cssBorderRadius(4px);
	// 	letter-spacing: 0.44px;
	// 	border: 1px solid $primary-colour;
	// 	padding: 13px 21px;
	// 	&:hover{
	// 		color: $primary-colour;
	// 	}
	// }

	@else if $type == shadow {
		font-size: remCalc(15px);
		font-weight: 700;
		padding: 13px 28px;
		letter-spacing: 0.5px;
		@include cssBoxShadow(1px, 2px, 4px, 0, #A8A8A8, 1);
	}
	
	@else if $type == gradient {
		@include cssGradient($primary-colour, none, $accent-green, horizontal);
		@if $gr-from != null and $gr-to != null {
			@include cssGradient($gr-from, none, $gr-to, horizontal);	
		}
	}
	
}

@mixin font-size($sizeValue: 16) {
  font-size: $sizeValue / ($sizeValue * 0 + 1) + px;
  font-size: $sizeValue / 16 * 1rem;
}